/***************** project_su3_direct.c *******************************/
/* Project a 3x3 complex matrix Q onto SU(3) by maximizing
   Re Tr (W Q+).  This code uses a direct method based on a singular
   value decomposition of Q. */

/* MIMD version 5 */

/* C. DeTar 11/30/97 based on cubic.c by T. DeGrand August 1993. */
/* UNFINISHED CODE */

#include "cool_inst_includes.h"

/* To maximize the value of S = Re Tr (W Q+) over W in SU(3)
   we consider the singular value decomposition of Q, 
   leading to the factorization  Q = U D V+ exp(i alpha)
   where U and V are in SU(3) and D = diag(d1,d2,d3) is real.
   The problem then becomes one of maximizing
   S = Re Tr[Z D exp(-i alpha)] where Z  = U+ W V is in SU(3).
   The optimum Z must be in the center of SU(3).
   To reduce the problem to this form we find the squares
   of d1, d2, and d3 as eigenvalues of the Hermitian
   matrix QQ+ and find alpha from the phase
   of the determinant of Q.  The final maximization of S
   is done in "max_it" */

/* w the resulting su3 matrix.  Initially it should contain a starting guess.
   q the starting 3x3 complex matrix.
   NumHit is unused
   */

void project_su3(su3_matrix *w, su3_matrix *q, int NumHit)
{
  int  i,j,k;
  su3_matrix action;
  float new_action;
  float phi1,phi2,alpha;
  complex s00,s01,s02,sss,sst,det;
  float ctheta,stheta;
  float a1,theta,d1,d2,d3,q,r,factor;
  complex a2,a3;
  void maxit();

  /* Optimization suggestion: The result is hermitian, so we
     could do with fewer elements of the matrix */

  /* first construct action = q*q+ */
  mult_su3_na( q, q, &action);

  /* Determination of eigenvalues of QQ+ */

  /*
     Coefficients of cubic for eigenvalues...
     a1= -(a00+a11+a22);
     a2= a00*a11 + a00*a22 + a11*a22 - a10*a01 - a12*a21 - a20*a02;
     a3= a10*a01*a22 + a21*a12*a00 + a20*a02*a11 - a00*a11*a22
     -a01*a12*a20 - a02*a21*a10;
     */

  a1= action.e[0][0].real + action.e[1][1].real + action.e[2][2].real;
  sss.real=a1/3.0;
  sss.imag=0.0;
  
  /* Optimization suggestion: Since "action" is hermitian, 
     the coefficients a1, a2, a3 are real, so we
     don't need to do complex arithmetic here */

  CSUB(action.e[0][0],sss,action.e[0][0]);
  CSUB(action.e[1][1],sss,action.e[1][1]);
  CSUB(action.e[2][2],sss,action.e[2][2]);
  
  /* Optimization suggestion: The result is hermitian, so we
     could do with fewer elements of the matrix */

  CMUL(action.e[0][0],action.e[1][1],a2);
  CMUL(action.e[0][0],action.e[2][2],sss);
  CSUM(a2,sss);
  CMUL(action.e[1][1],action.e[2][2],sss);
  CSUM(a2,sss);
  CMUL(action.e[1][0],action.e[0][1],sss);
  CSUB(a2,sss,a2);
  CMUL(action.e[1][2],action.e[2][1],sss);
  CSUB(a2,sss,a2);
  CMUL(action.e[2][0],action.e[0][2],sss);
  CSUB(a2,sss,a2);
  
  
  CMUL(action.e[0][1],action.e[2][2],sss);
  CMUL(action.e[1][0],sss,a3);
  
  CMUL(action.e[1][2],action.e[0][0],sst);
  CMUL(action.e[2][1],sst,sss);
  CSUM(a3,sss);
  
  CMUL(action.e[0][2],action.e[1][1],sst);
  CMUL(action.e[2][0],sst,sss);
  CSUM(a3,sss);
  
  CMUL(action.e[1][1],action.e[2][2],sst);
  CMUL(action.e[0][0],sst,sss);
  CSUB(a3,sss,a3);
  
  CMUL(action.e[1][2],action.e[2][0],sst);
  CMUL(action.e[0][1],sst,sss);
  CSUB(a3,sss,a3);
  
  CMUL(action.e[2][1],action.e[1][0],sst);
  CMUL(action.e[0][2],sst,sss);
  CSUB(a3,sss,a3);
  
  q = -a2.real/3.0;
  r= a3.real/2.0;
  
  theta =   r/sqrt(fabs(q*q*q)); 
  /*
     if(theta < -1.00000) {printf("%e %e theta=%e\n",q,r,theta);theta= PI;}
     else if(theta > 1.000) {printf("%e %e theta=%e\n",q,r,theta);theta= PI;}
     */
  if(theta < -0.9999999) theta= PI;
  else if(theta > 1.00000) theta= 0.0;
  else theta = acos( theta);
  
  if(q>1.e-12) factor = sqrt(q); else factor=0.0;
  

  /* Optimization suggestion: The trace is known, so we
     don't need an explicit calculation for one of these */

  d1= -2.0*factor*cos(theta/3.0) + a1/3.0;
  d2= -2.0*factor*cos((theta + 2.0*PI)/3.0) + a1/3.0;
  d3= -2.0*factor*cos((theta + 4.0*PI)/3.0) + a1/3.0;
  
  /*
     printf("d1= %e d2= %e d3= %e\n",d1,d2,d3);
     */
  
  /* these are eigenvalues of q**2 so take a square root */
  
  d1 = sqrt(d1);
  d2 = sqrt(d2);
  d3 = sqrt(d3);
  
  /* Optimization suggestion: Since we are doing
     the determinant anyway, could we do this first and
     use this information to simplify further the 
     eigenvalue determination? */

  /* phase of determinant of q */
  CMUL(q->e[1][1],q->e[2][2],s00);
  CMUL(q->e[2][1],q->e[1][2],sss);
  CSUB(s00,sss,s00);
  
  CMUL(q->e[1][0],q->e[2][2],s01);
  CMUL(q->e[2][0],q->e[1][2],sss);
  CSUB(s01,sss,s01);
  
  CMUL(q->e[1][0],q->e[2][1],s02);
  CMUL(q->e[2][0],q->e[1][1],sss);
  CSUB(s02,sss,s02);
  
  CMUL(q->e[0][0],s00,det);
  CMUL(q->e[0][1],s01,sss);
  CSUB(det,sss,det);
  CMUL(q->e[0][2],s02,sss);
  CSUM(det,sss);
  
  CMUL_J(det,det,sss);
  if( sss.real < 1.e-12) printf("det vanishing %e\n",sss.real);
  
  ctheta= det.real/sqrt(sss.real);
  stheta= det.imag/sqrt(sss.real);
  
  if(fabs(stheta) > 1.e-6) {
    if(stheta < 0.0) alpha= -acos(ctheta);
    if(stheta >= 0.0) alpha= acos(ctheta);
    alpha /= 3.0;
  }
  else alpha=0.0;
  
  
  /* now for maximization of function */
  
  /* first special case */
  if(alpha == 0.0) 
    {
      new_action=d1+d2+d3;
      phi1 = phi2 = 0.0;
    }
  
  else maxit(d1,d2,d3,alpha,&phi1,&phi2,&new_action);

  /* CODE TO BE FINISHED */

  /* Get the eigenvectors of Q Q+ - these are column vectors of U */

  /* Find V = exp(-i alpha) Q+ U /D */

  /* Find W = U Z V+ 
     where Z = diag(exp(-i phi1),exp(-i phi2),exp(i(phi1 + phi2))) */
  
} /* do_min */

/* Maximizes d1*cos(*phi1+alpha) + d2*cos( *phi2+alpha) 
      +d3*cos(*phi1+ *phi2-alpha) with respect to phi1 and phi2 */

void maxit(d1,d2,d3,alpha,phi1,phi2,fmax)
     float d1,d2,d3;                /* Mod eigenvalues of q */
     float alpha;                   /* 1/3 arg of q determinant */
     float *phi1,*phi2;             /* Best values for phi1 and phi2 */
     float *fmax;                   /* The maximum value */
{
  int j1,j2;
  int nmax,tmax,try,flag,flag2;
  float ph1,ph2,f,det;
  float f1,f2,f11,f12,f22,dph1,dph2,ph1t,ph2t,ft;
  nmax=10;
  tmax=5;
  try=3;
  
  *fmax = (d1+d2+d3)*cos(alpha);
  *phi1 = 0.0; *phi2=0.0;
  
  if(fabs(alpha)>1.e-3){
    for(j1=0;j1<=nmax;j1++)
      for(j2=0;j2<=nmax;j2++){
	ph1=2.0*PI*(.01+(float)j1)/(float)nmax;
	ph2=2.0*PI*(.01+(float)j2)/(float)nmax;
	f =
	  d1*cos(ph1+alpha) + d2*cos(ph2+alpha) +d3*cos(ph1+ph2-alpha);
	if(f > *fmax){*fmax=f; *phi1=ph1; *phi2=ph2;}
      }
  }
  /* if alpha is tiny so are phi1 and phi2: taylor expand */
  else{
    det=d1*d2+d1*d3+d2*d3;
    f1= 2.0*d2*d3 - d1*(d2+d3);
    f2= 2.0*d1*d3 - d2*(d1+d3);
    *phi1= alpha*f1/det; *phi2= alpha*f2/det;
    *fmax=   d1*cos(*phi1+alpha) + d2*cos( *phi2+alpha) 
      +d3*cos(*phi1+ *phi2-alpha);
  }
  
  /* now some newton method */
  ph1 = *phi1; ph2=*phi2; flag2=1;
  
  for(j1=0;j1<tmax && flag2==0;j1++) {
    
    f1= -d1*sin(ph1+alpha)  -d3*sin(ph1+ph2-alpha);
    f2= -d2*sin(ph2+alpha)  -d3*sin(ph1+ph2-alpha);
    
    f11= d1*cos(ph1+alpha)  +d3*cos(ph1+ph2-alpha);
    f12= d3*cos(ph1+ph2-alpha);
    f22= d2*cos(ph2+alpha) +d3*cos(ph1+ph2-alpha);
    
    det= f11*f22-f12*f12;
    dph1 = (f22*f1-f12*f2)/det;
    dph2 = ( -f12*f1 + f11*f2)/det;
    flag=0;
    if(fabs(dph1) < 1.e-10 && fabs(dph2)<1.e-10) {flag=1; flag2=0;}
    if(fabs(dph1) > 0.3) {printf("dph1=%e\n",dph1); dph1= 0.3*dph1/fabs(dph1);}
    if(fabs(dph2) > 0.3) {printf("dph2=%e\n",dph2);dph2= 0.3*dph2/fabs(dph2);}
    
    if(flag2 == 0) {
      for(j2=0;j2<try && flag==0;j2++){
	ph1t= ph1+dph1;
	ph2t= ph1+dph2;
	ft=d1*cos(ph1t+alpha) + d2*cos(ph2t+alpha) 
	  +d3*cos(ph1t+ph2t-alpha);
	if(ft >= *fmax){*fmax =ft; ph1=ph1t; ph2=ph2t; flag=1;}
	else{ dph1 /= 2.0; dph1 /= 2.0; }
	
	
      }
      if(flag==0 && (*fmax - ft > 5.e-6))
	printf("newton: dphi1=%e dphi2=%e,ft-fmax=%e\n",dph1,dph2,ft - *fmax);
    }
  }
  *fmax=	 d1*cos(ph1+alpha) + d2*cos(ph2+alpha) +d3*cos(ph1+ph2-alpha);
  
  
  
} /* maxit */
