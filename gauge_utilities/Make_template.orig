#  Kogut-Susskind fermions with improved actions
#  MIMD version 7
#
#  Generic make-include file for ks_imp_dyn
#  Use -DONEMASS to build for a single degenerate quark mass
#  Otherwise the build assumes two quark masses.
#
#  This template file defines rules and macros common to all architectures
#  It is intended to be an include file for other Makefiles.
#  Don't use it by itself!
#
#	"make su3_rmd" used the refreshed molecular dynamics algorithm
#		for the Symanzik 1 loop gauge action and Asqtad quark action
#	"make su3_rmd1" Same, but for one degenerate quark mass
#
#	"make su3_spectrum" uses the refreshed molecular dynamics
#	        algorithm with the su3_rmd action and does spectrum
#	        measurements
#	"make su3_spectrum1" Same, but for one degenerate quark mass
#
#	"make su3_hybrids" uses the refreshed molecular dynamics
#	        algorithm with the su3_rmd action and does spectrum
#	        measurements, including the hybrid spectrum
#	"make su3_hybrids1" Same, but for one degenerate quark mass
#
#       See examples below for naming and building targets for
#               other actions

MYINCLUDEDIR = .
INCLUDEDIR = ../include
#Where the complex and su3 libraries are
LIBDIR = ../libraries

GLOBAL_HEADERS = ${INCLUDEDIR} ../libraries/include

INLINE_HEADERS = \
  ../sse/include/ \
  ../sse2/include/ \
  ../libraries/include/

MY_HEADERS = \
  lattice.h \
  params.h \
  defines.h \
  ks_imp_includes.h

HEADERS = ${GLOBAL_HEADERS} ${MY_HEADERS} ${INLINE_HEADERS} ${SCIDAC_HEADERS}

MY_OBJECTS= \
  control.o \
  gauge_info.o \
  setup.o \
  update_h.o \
  update_u.o

G_OBJECTS = \
  check_unitarity.o \
  d_plaq4.o \
  gaugefix2.o \
  gauge_stuff.o \
  io_detect.o \
  io_helpers.o \
  io_lat4.o \
  io_lat_utils.o \
  make_lattice.o \
  nersc_cksum.o \
  path_product.o \
  ranmom.o \
  remap_stdio_from_args.o \
  reunitarize2.o \
  ranstuff.o

ifeq ($(strip ${QCDOC}),true)
  G_OBJECTS += ploop2.o
else
  G_OBJECTS += ploop3.o
endif

ifeq ($(strip ${HAVEQIO}),true)
  G_OBJECTS += io_scidac.o
endif

G_KS_OBJECTS = \
  f_meas.o \
  grsource_imp.o \
  mat_invert.o \
  path_transport.o \
  quark_stuff.o \
  rephase.o

SPECTRUM_OBJECTS = \
  ape_smear.o \
  flavor_ops.o \
  fpi_2.o \
  hvy_pot.o \
  nl_spectrum.o \
  project_su3_hit.o \
  spectrum2.o \
  spectrum_fzw.o \
  spectrum_mom.o \
  spectrum_multimom.o \
  spectrum_nd.o \
  spectrum_nlpi2.o \
  spectrum_singlets.o

# Objects depending on architecture and software package 

# Selection of layout
ifeq ($(strip ${QCDOC}),true)
  LAYOUT = layout_qcdoc.o # Required
else
  ifeq ($(strip ${HAVEQDP}),true)
    LAYOUT = layout_qdp.o # Required
  else
    LAYOUT = layout_hyper_prime.o # Choices possible here
  endif
endif

# Selection of a non-QDP FN Dslash 
# Choices are dslash_fn.o dslash_fn2.o dslash_fn_dblstore.o
DSLASH_FN = dslash_fn2.o

# Selection of the fermion links algorithm
ifeq ($(strip ${HAVEQOP}),true)
# Interface to access QOP
  FLINKS_FN = fermion_links_asqtad_qop.o fermion_links_asqtad_qop_D.o \
     fermion_links_asqtad_qop_F.o
  FLINKS_FN += ${FLINKS_FNQOP}
else
  ifeq ($(strip ${HAVEQDP}),true)
    FLINKS_FN = fermion_links_asqtad_qdp.o
  else
    FLINKS_FN = fermion_links_fn.o
  endif
endif
FLINKS_FN += fermion_links_helpers.o

# Selection of the gauge force algorithm
ifeq ($(strip ${HAVEQOP}),true)
# Interface to access QOP
  SYMZK1FORCE = gauge_force_symzk1_qop.o
  SYMZK1FORCE += ${SYMZK1FORCEQOP}
else
  ifeq ($(strip ${HAVEQDP}),true)
    SYMZK1FORCE = gauge_force_symzk1_qdp.o
  else
    SYMZK1FORCE = gauge_force_imp.o
  endif
endif

# Selection of the conjugate gradient algorithm
ifeq ($(strip ${HAVEQOP}),true)
# Interface to access QOP
  CONGRAD_FN = d_congrad5_fn_qop_two_src.o d_congrad5_fn_qop.o \
     d_congrad5_fn_qop_D.o d_congrad5_fn_qop_F.o d_congrad_opt.o
#  CONGRAD_FN = d_congrad5_two_src.o d_congrad5_fn.o d_congrad_opt.o
  CONGRAD_FN += ${ASQINVERTQOP}
else
  ifeq ($(strip ${HAVEQDP}),true)
    CONGRAD_FN = d_congrad5_two_src.o d_congrad5_fn_qdp.o d_congrad_opt.o
#    Here you may use the fn_qdp set or the fn_1sum_qdp set
#    CONGRAD_FN += d_congrad5_fn_qdp_D.o d_congrad5_fn_qdp_F.o 
    CONGRAD_FN += d_congrad5_fn_1sum_qdp_D.o d_congrad5_fn_1sum_qdp_F.o
  else
    # Choose a non_QDP FN conjugate gradient algorithm
    CONGRAD_FN = d_congrad5_two_src.o d_congrad5_fn.o d_congrad_opt.o
  endif
endif

# Selection of the fermion force algorithm
ifeq ($(strip ${HAVEQOP}),true)
# Interface to access QOP
  ASQFORCE = fermion_force_asqtad_qop.o fermion_force_asqtad_qop_F.o \
     fermion_force_asqtad_qop_D.o
# The implementation of the interface (if not packaged)
  ASQFORCE += ${ASQFORCEQOP}
else
  ifeq ($(strip ${HAVEQDP}),true)
    ASQFORCE = fermion_force_asqtad_qdp.o fermion_force_asqtad_qdp_D.o \
	fermion_force_asqtad_qdp_F.o fermion_force_fn_multi_qdp.o
  else
    # For more general FN actions, try fermion_force_general.o +
    #	fermion_force_fn_multi.o + fermion_force_multi.o
    ASQFORCE = fermion_force_asqtad.o fermion_force_multi.o \
	fermion_force_fn_multi.o ff_opt.o
  endif
endif

# Selection of the multimass inverter
ifeq ($(strip ${HAVEQOP}),true)
# Interface to access QOP
  INV_FN_OBJECTS = ${CONGRAD_FN} ${DSLASH_FN}
  MULTI_INV_FN = ks_multicg.o ks_multicg_offset_qop.o \
    ks_multicg_offset_qop_D.o  ks_multicg_offset_qop_F.o
else
  ifeq ($(strip ${HAVEQDP}),true)
    QDP_OBJECTS = map_milc_to_qdp_D.o map_milc_to_qdp_F.o
    INV_FN_OBJECTS = ${CONGRAD_FN} ${DSLASH_FN} dslash_fn_qdp_D.o \
      dslash_fn_qdp_F.o 
    MULTI_INV_FN = ks_multicg.o ks_multicg_offset_qdp.o \
      ks_multicg_offset_qdp_D.o ks_multicg_offset_qdp_F.o
  else
    INV_FN_OBJECTS = ${CONGRAD_FN} ${DSLASH_FN}
    MULTI_INV_FN = ks_multicg.o ks_multicg_offset.o
  endif
endif

# The only choice for generic gauge actions
IMPGAUGEFORCE= gauge_force_imp.o

# The only choice for inverters and Dslash for EO actions
INV_EO_OBJECTS = d_congrad5_eo.o d_congrad_opt.o dslash_eo.o
MULTI_INV_EO = ks_multicg.o ks_multicg_offset.o

# For EO actions we don't precompute the fat links for Dslash at the moment
FN_OBJECTS = ${FLINKS_FN} ${INV_FN_OBJECTS}
EO_OBJECTS = ${INV_EO_OBJECTS}

# EDRAM allocation for QCDOC
ifeq ($(strip ${QCDOC}),true)
  QCDOC_OBJECTS = qcdoc_alloc.o
endif

ADD_OBJECTS = ${MACHINE_DEP_IO} ${COMMPKG} ${QCDOC_OBJECTS} ${QDP_OBJECTS} \
   ${SCIDAC_OBJECTS}

# Generic QOP objects
ifeq ($(strip ${HAVEQOP}),true)
  ADD_OBJECTS += ${GENERICQOP} map_milc_to_qop.o milc_to_qop_utilities.o
endif

OBJECTS = ${MY_OBJECTS} ${G_OBJECTS} ${G_KS_OBJECTS} ${LAYOUT} \
  ${ADD_OBJECTS} ${EXTRA_OBJECTS}

#Libraries for complex numbers and su3 functions
QCDLIB = ${LIBDIR}/su3.${PRECISION}.a ${LIBDIR}/complex.${PRECISION}.a 

LIBRARIES = ${QCDLIB} ${SCIDAC_LIBRARIES}

# Default rule for C compilation
.c.o: ; ${CC} -c ${CFLAGS}  $*.c 

# To force a full remake when changing targets
LASTMAKE = .lastmake.${MAKEFILE}.${PRECISION}.${MYTARGET}

${LASTMAKE}:
	-/bin/rm -f .lastmake.* quark_action.h gauge_action.h
	${MAKE} -f ${MAKEFILE} clean
	touch ${LASTMAKE}

ALL_MAKES = \
   Make_template \
   ${MAKEFILE} \
   ../Make_template_qop \
   ../Make_template_scidac \
   ../generic/Make_template \
   ../generic_ks/Make_template

# To force a remake when changing any make file, header, or target
${OBJECTS} : ${HEADERS} ${LASTMAKE} ${ALL_MAKES}

fermion_links_fn.o: quark_action.h 
gauge_stuff.o: gauge_action.h 
gauge_info.o:  quark_action.h
quark_stuff.o: quark_action.h 

# Directories where we store the improved action headers
QUARKIMP = ../generic_ks/imp_actions
GAUGEIMP = ../generic/imp_actions

quark_action.h: ${QUARKIMP}/${QUARK}
	/bin/cp ${QUARKIMP}/${QUARK} quark_action.h

gauge_action.h: ${GAUGEIMP}/${GAUGE}
	/bin/cp ${GAUGEIMP}/${GAUGE} gauge_action.h


ifeq ($(strip ${QCDOC}),true)
  DQCDOC = -DQCDOC
endif

ifeq ($(strip ${HAVEQMP}),true)
  DHAVE_QMP = -DHAVE_QMP
endif

ifeq ($(strip ${HAVEQIO}),true)
  DHAVE_QIO = -DHAVE_QIO
endif

ifeq ($(strip ${HAVEQDP}),true)
  DHAVE_QDP = -DHAVE_QDP
endif

ifeq ($(strip ${HAVEQOP}),true)
  DHAVE_QOP = -DHAVE_QOP
endif

DARCH = ${DQCDOC} ${DHAVE_QMP} ${DHAVE_QIO} ${DHAVE_QDP} ${DHAVE_QOP}

########################################################
# Optional DEFINES for targets

# -DFN          identifies fat-Naik-like actions with only next and 3rd
#               next neighbor linkage

# -DONEMASS     only one fermion species (formerly ks_imp_dyn1)
# 
# -DNPBP_REPS   adds an extra line to parameter input for specifying
#               the number of random sources in f_meas.c

# -DDM_DU0      (for EOS) calculate quantities involving the deriv of
#               action wrto u0

# -DCHEM_POT    compute quantities needed for quark number susceptibility

# -DD_CHEM_POT  compute quantities needed for nonzero chemical potential


##### Targets: 

su3_rmd::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN -DCOM_CRC" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} update.o"

su3_rmd1::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  -DONEMASS" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} update_onemass.o"

su3_rmd_eos::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  -DDM_DU0 -DNPBP_REPS" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} update.o"

su3_rmd_eos1::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  -DDM_DU0 -DNPBP_REPS -DONEMASS" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	update_onemass.o"

su3_rmd_susc::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  -DNPBP_REPS -DCHEM_POT" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} update.o"

su3_rmd_mu_eos::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN -DDM_DU0 -DNPBP_REPS -DD_CHEM_POT" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS=  ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	update.o mu_fast.o"

su3_rmd_dblstore_gath13_fewsums::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  -DDBLSTORE_FN -DD_FN_GATHER13 -DFEWSUMS" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FLINKS_FN} ${ASQFORCE} ${SYMZK1FORCE} \
	d_congrad5_two_src.o d_congrad_opt.o \
	d_congrad5_fn.o dslash_fn_dblstore.o update.o"

su3_hmc::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  \
	-DPHI_ALGORITHM -DHMC_ALGORITHM" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	d_action.o update.o"

su3_hmc1::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  -DONEMASS \
	-DPHI_ALGORITHM -DHMC_ALGORITHM" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	d_action.o update_onemass.o"

su3_rmd_naive::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DEO  -DONEMASS" \
	"GAUGE = plaquette_action.h" \
	"QUARK = onelink_action.h" \
	"EXTRA_OBJECTS= ${EO_OBJECTS} ${IMPGAUGEFORCE} \
	fermion_force_general.o \
	update_onemass.o"

su3_hmc_eo_symzk1_p4::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DEO -DPHI_ALGORITHM -DHMC_ALGORITHM" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = p4_action.h" \
	"EXTRA_OBJECTS= ${EO_OBJECTS} ${SYMZK1FORCE} d_congrad5_two_src.o \
	 fermion_force_general.o d_action.o update.o"

# The following target is a superset of su3_spectrum

su3_hybrids::
	make -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN 	-DSPECTRUM -DHYBRIDS" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	${MULTI_INV_FN} \
	field_strength.o spectrum_hybrids5.o update.o \
	${SPECTRUM_OBJECTS}"

su3_hybrids1::
	make -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN 	-DSPECTRUM -DHYBRIDS -DONEMASS" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	${MULTI_INV_FN} \
	field_strength.o spectrum_hybrids5.o update_onemass.o \
	${SPECTRUM_OBJECTS}"

# The following target will not do hybrids

su3_spectrum::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN 	-DSPECTRUM" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	${MULTI_INV_FN} ${SPECTRUM_OBJECTS} update.o"


su3_spectrum1::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN 	-DSPECTRUM -DONEMASS" \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = asqtad_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${ASQFORCE} ${SYMZK1FORCE} \
	${MULTI_INV_FN} ${SPECTRUM_OBJECTS} update_onemass.o"

# The following stanzas illustrate how to create targets for alternative
# choices of quark and gauge actions

su3_rmd_eo_symzk1_fat7tad::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DEO " \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = fat7tad_action.h" \
	"EXTRA_OBJECTS= ${EO_OBJECTS} ${SYMZK1FORCE} d_congrad5_two_src.o \
	fermion_force_general.o update.o"

su3_rmd_plaq_fat7naik::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN " \
	"GAUGE = plaquette_action.h" \
	"QUARK = fat7naik_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${IMPGAUGEFORCE} \
	fermion_force_general.o update.o"

su3_rmd_plaq_fat7naik1::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN  -DONEMASS" \
	"GAUGE = plaquette_action.h" \
	"QUARK = fat7naik_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${IMPGAUGEFORCE} \
	fermion_force_general.o update_onemass.o"

su3_rmd_symzk1_naik::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DFN " \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = naik_action.h" \
	"EXTRA_OBJECTS= ${FN_OBJECTS} ${SYMZK1FORCE} \
	fermion_force_general.o"

su3_rmd_eo_symzk1_p4::
	${MAKE} -f ${MAKEFILE} target "MYTARGET= $@" \
	"DEFINES= -DEO " \
	"GAUGE = symanzik_1loop_action.h" \
	"QUARK = p4_action.h" \
	"EXTRA_OBJECTS= ${EO_OBJECTS} ${SYMZK1FORCE} d_congrad5_two_src.o \
	 fermion_force_general.o d_action.o update.o"

clean:
	-/bin/rm -f *.o

# Rules for generic routines
include ../generic/Make_template

# Rules for generic_ks routines
include ../generic_ks/Make_template

libmake:
	@echo Building libraries with ${MAKELIBRARIES}
	cd ${LIBDIR} ;\
	${MAKE} -f ${MAKELIBRARIES} "APP_CC=${CC}" "PRECISION=${PRECISION}" all

localmake: ${OBJECTS} ${LIBRARIES}
	${LD} -o ${MYTARGET} ${LDFLAGS} \
	${OBJECTS} ${QCDLIB} ${ILIB} -lm
	touch localmake

target: libmake localmake 

