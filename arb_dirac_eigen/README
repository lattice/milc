This directory has the programs to compute eigenvalues and eigenfunctions
of sparse hermetian matrices acting on wilson_vectors. At present there is
one executable, su3_arb_cg_eig. It is based on Orginos' staggered code.
It can write or read up to 12 eigenvectors for restarts.
(It uses the standard Milc code for saving propagators.)
It presently computes eigenvectors and eigenvalues of D^\dagger(m)D(m)
where D(m) is some (arbitrary) fermion matrix.

[This application has not been properly integrated into the rest of   ]
[version 6 code.  For example, one should explore whether the         ]
[generic_clover routines can be modified to accommodate the needs of  ]
[this application, thereby reducing numerous duplications.            ] - CD

[THIS APPLICATION HAS NOT BEEN DEBUGGED ON MORE THAN ONE PROCESSOR!!] -CD

The Dirac operator is encoded in a routine delta0.c and one calls it as
    delta0( F_OFFSET(sss), F_OFFSET(ttt), PLUS );
or
void delta0(field_offset src,field_offset dest,  int isign)
for dest= delta0*src (sign=PLUS for delta0, MINUS for delta-dagger)

In the present code delta0 is set up to loop over a set of offsets;
each offset is presumed to have its own link. The coefficients of the
action are set in a file called build_params.c and many choices are
present. The user is supposed to input one parameter, the bare mass,
and build_params is sipposed to construct the appropriate free action

S = \bar \psi(\lambda(x) +  sum_\mu \gamma_\mu rho_\mu(x)) \psi

The wilson action is coded in  build_params_w.c, as a simple example.
The clover and a planar actions are 
build_params_cl.c and build_params_pl1.6.c.

The offsets for the terms in delta0 are created in setup_offset.c.
The links associated with an offset are created in setup_links.c
At present, it just averages over all the topologically distinct paths
connecting the fermions (x,y and y,x for offset +x,+y, for example).
I have only used this code for actions which are confined to a hypercube
but there is no reason it cannot be extended. It is quite possible to shrink
the size of the executable by eliminating offsets (and their associated
links). Compare setup_offset_hy.c and setup_offset_pl.c.
 I have also sometimes inserted intermediate routines between delta0.c and
build_params.c for really interesting (iterated) actions.

The code allows for fat gauge links--with the fattening hardwired in.
See monte_block_ape_b_many.c.

The clover term code does not include the ''1'' of the tricky standard
MILC version. This code only keeps the simple clover term, but I also
have code to do complicated Pauli-type interactions.



At the end, it takes the eigenvectors of D^\dagger(m)D(m)
and computes the matrix element of the Hermetian operator gamma-5 D(m);
it then diagonalizes gamma-5 D(m) in the subspace of eigenvectors for
a second computation of the spectrum of gamma-5 D(m).


This is working (as opposed to beautiful) code. here's a sample
 input file (in.sample):




prompt 0
nx 4
ny 4
nz 4
nt 4
iseed 1234
 
number_of_masses 1
m0 0.1                    <- bare mass for action
max_cg_iterations 108          <- not used (yet)
max_cg_restarts 1          <- not used (yet)
error_for_propagator 1.e-9          <- not used (yet)
gaussian          <- not used (yet)
r0 2.0          <- not used (yet)
Number_of_eigenvals 6  <-- now we begin the real input
Max_Rayleigh_iters 100
Restart_Rayleigh 10
Kalkreuter_iters 10
eigenval_tolerance 1.0e-3  <--related to CG accuracy (?)
error_decrseace .3
reload_serial c4444.d
no_gauge_fix
forget
fresh_prop              <--can read <=12 eigenvectors
save_serial_prop w6.d   <--can save <=12 eigenvectors
serial_scratch_prop stem



T. DeGrand